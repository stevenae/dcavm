[{"name": "app.py", "content": "from shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_plotly\nimport plotly.express as px\nimport pandas as pd\nimport polars as pl\nimport polars.selectors as cs\n\nui.page_opts(fillable=True)\n\n# Read nowcast for visualization\nrank_cols = ['BATHRM','HF_BATHRM','BEDRM','GBA','YR_RMDL','EYB']\nnowcast_price_col = 'nowcast_prediction'\naddress_col = 'ADDRESS'\nlocation_cols = ['LATITUDE','LONGITUDE']\nnowcast_select_cols = [*rank_cols,nowcast_price_col,address_col,*location_cols]\npreds = pl.read_csv('~/Documents/nowcast_predictions.csv',\n                    columns=nowcast_select_cols)\npreds = preds.rename({'ADDRESS':'Address'})\naddress_col = 'Address'\npreds = preds.rename({'nowcast_prediction':'Nowcast'})\nnowcast_price_col = 'Nowcast'\npretty_names = {\n                'GBA':'Square Ft',\n                'BEDRM':'Bedrooms',\n                'BATHRM':'Bathrooms',\n                'EYB':'Year Built/Remodeled',\n            }\npreds = preds.with_columns(pl.col('BATHRM').add(pl.col('HF_BATHRM')))\npreds = preds.drop('HF_BATHRM')\nrank_cols.remove('HF_BATHRM')\npreds = preds.with_columns(pl.max_horizontal(pl.col('EYB'),pl.col('YR_RMDL')))\npreds = preds.drop('YR_RMDL')\nrank_cols.remove('YR_RMDL')\naddresses = preds[address_col]\n\n# Read backtest for error and comps\nprev_sale_price_col = 'PRICE'\nprev_sale_select_cols = [prev_sale_price_col,'SALEDATE','error','predictions']\nprev_sale_select_cols = prev_sale_select_cols.extend(address_col)\nerrs = pl.read_csv('~/Documents/xgb_errors.csv',\n                    columns=prev_sale_select_cols)\n\nui.page_opts(title=\"RadarCh.art\", fillable=True)\n\nwith ui.sidebar():\n    ui.input_selectize(  \n        \"selectize\",  \n        \"Type or select one or more addresses:\",  \n        list(addresses.sort()),\n        multiple=True,\n        options = {'closeAfterSelect':True}\n    )\n    @render.data_frame\n    def nowcast_table():\n        nowcast = subset_nowcast()\n        nowcast = nowcast.rename(pretty_names)\n        nowcast = nowcast.to_pandas()\n        nowcast[nowcast_price_col] = nowcast[nowcast_price_col].div(1e3).map('${:,.0f}K'.format)\n        return render.DataGrid(nowcast,\n                               row_selection_mode=\"single\",\n                               summary=False)\n\n@render.text\ndef value():\n    return \"Percentiles of selected homes' attributes, compared to homes with similar (+/- 10%) price and location\"\n    # return f\"{input.selectize()}\"\n\n@reactive.calc\ndef subset_nowcast():\n    selected_rows = preds.filter(pl.col(address_col).is_in(input.selectize()))\n    return(selected_rows)\n\n@reactive.calc\ndef nowcast_similars():\n    nowcast_subset = subset_nowcast()\n\n    price_offset_pct = .10\n    price_range_filter_bottom = nowcast_subset[nowcast_price_col].min()*(1-price_offset_pct)\n    price_range_filter_top = nowcast_subset[nowcast_price_col].max()*(1+price_offset_pct)\n    nowcast_price_offset_filter = pl.col(nowcast_price_col).is_between(\n                                                            price_range_filter_bottom,\n                                                            price_range_filter_top\n                                                            )\n    similarly_priced = nowcast_subset.filter(nowcast_price_offset_filter)\n    print(similarly_priced.shape)\n\n    location_offset_pct = .10\n    for location_col in location_cols:\n        location_range_filter_bottom = similarly_priced[location_col].min()*(1-location_offset_pct)\n        location_range_filter_top = similarly_priced[location_col].max()*(1+location_offset_pct)\n        nowcast_location_offset_filter = pl.col(location_col).is_between(\n                                                                location_range_filter_bottom,\n                                                                location_range_filter_top\n                                                                )\n        similarly_priced = similarly_priced.filter(nowcast_location_offset_filter)\n        print(similarly_priced.shape)\n\n    # Add seleted rows to nearby homes to calculate ranks\n    similarly_priced = pl.concat([similarly_priced,nowcast_subset],how='vertical')\n    num_selected_rows = nowcast_subset.shape[0]\n    similarly_priced = similarly_priced.with_columns((\n                                                        pl.col(rank_cols).rank() /\n                                                        pl.col(rank_cols).count()\n                                                        ))\n    radar_chart_vals = similarly_priced.tail(num_selected_rows)\n    return(radar_chart_vals)\n\n\nwith ui.navset_pill(id=\"tab\"):  \n\n    with ui.nav_panel(title=\"Comparison\",value='comparison_tab'):\n        @render_plotly\n        def radar():\n            similars = nowcast_similars()\n            similars = similars.drop([nowcast_price_col,*location_cols])\n            similars = similars.rename(pretty_names)\n            similars = similars.melt(id_vars=address_col,value_vars=cs.numeric())\n            similars = similars.with_columns(pl.col('value').mul(100).round(0))\n            similars = similars.rename({'value':'Percentile',\n                             'variable':'Attribute'})\n            fig = px.line_polar(similars, r='Percentile', color=address_col, theta='Attribute', line_close=True)\n            # fig.update_traces(\n            #     hovertemplate=\"<br>\".join([\n            #         \"ColX: %{x}\",\n            #         \"ColY: %{y}\",\n            #         \"Col1: %{customdata[0]}\",\n            #         \"Col2: %{customdata[1]}\",\n            #         \"Col3: %{customdata[2]}\",\n            #     ])\n            # )\n            return fig\n", "type": "text"}]